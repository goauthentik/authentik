# Generated by Django 5.1.12 on 2025-09-12 08:38

from django.db import migrations, models
import django.db.models.deletion
import uuid

from django.apps.registry import Apps
from django.db.backends.base.schema import BaseDatabaseSchemaEditor


def migrate_parents(apps: Apps, schema_editor: BaseDatabaseSchemaEditor):
    Group = apps.get_model("authentik_core", "Group")
    db_alias = schema_editor.connection.alias

    for group in Group.objects.using(db_alias).all():
        if not group.parent:
            continue
        group.parents.add(group.parent)
        group.save()


create_transitive_closure = """
CREATE MATERIALIZED VIEW authentik_core_groupancestry AS
    WITH RECURSIVE accumulator AS (
        SELECT
        child_id::text || '-' || parent_id::text as id,
        child_id AS descendant_id,
        parent_id AS ancestor_id
        FROM authentik_core_groupparentage

        UNION

        SELECT
        accumulator.descendant_id::text || '-' || current.parent_id::text as id,
        accumulator.descendant_id,
        current.parent_id AS ancestor_id
        FROM accumulator
        JOIN authentik_core_groupparentage current
        ON accumulator.ancestor_id = current.child_id
    )
    SELECT * FROM accumulator;

-- Single column indexes for speed
CREATE INDEX "authentik_core_groupancestry_descendant_id"
ON "authentik_core_groupancestry"
("descendant_id");
CREATE INDEX "authentik_core_groupancestry_ancestor_id"
ON "authentik_core_groupancestry"
("ancestor_id");

-- Unique index for `REFRESH MATERIALIZED VIEW CONCURRENTLY`
CREATE UNIQUE INDEX "authentik_core_groupancestry_id"
ON "authentik_core_groupancestry"
("id");

-- Refresh function
CREATE OR REPLACE FUNCTION refresh_group_ancestry()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
    REFRESH MATERIALIZED VIEW CONCURRENTLY authentik_core_groupancestry;
    RETURN NULL;
END;
$$;

-- Refresh trigger
CREATE OR REPLACE TRIGGER trigger_refresh_group_ancestry
AFTER INSERT OR UPDATE OR DELETE
ON authentik_core_groupparentage
FOR EACH STATEMENT
EXECUTE PROCEDURE refresh_group_ancestry();
"""

remove_transitive_closure = """
DROP TRIGGER IF EXISTS trigger_refresh_group_ancestry ON authentik_core_groupancestry CASCADE;
DROP FUNCTION IF EXISTS refresh_group_ancestry() CASCADE;
DROP MATERIALIZED VIEW IF EXISTS authentik_core_groupancestry CASCADE;
"""


class Migration(migrations.Migration):

    dependencies = [
        ("authentik_core", "0051_group_authentik_c_is_supe_1e5a97_idx"),
    ]

    operations = [
        migrations.CreateModel(
            name="GroupAncestryNode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
            ],
            options={
                "db_table": "authentik_core_groupancestry",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="GroupParentageNode",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "child",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parent_nodes",
                        to="authentik_core.group",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_nodes",
                        to="authentik_core.group",
                    ),
                ),
            ],
            options={
                "verbose_name": "Group Parentage Node",
                "verbose_name_plural": "Group Parentage Nodes",
                "db_table": "authentik_core_groupparentage",
            },
        ),
        migrations.AddField(
            model_name="group",
            name="parents",
            field=models.ManyToManyField(
                blank=True, through="authentik_core.GroupParentageNode", to="authentik_core.group"
            ),
        ),
        migrations.RunPython(migrate_parents, migrations.RunPython.noop),
        migrations.RunSQL(create_transitive_closure, remove_transitive_closure),
    ]
