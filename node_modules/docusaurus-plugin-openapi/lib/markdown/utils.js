"use strict";
/* ============================================================================
 * Copyright (c) Cloud Annotations
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 * ========================================================================== */
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = exports.guard = exports.create = void 0;
function create(tag, props) {
    const { children, ...rest } = props;
    let propString = "";
    for (const [key, value] of Object.entries(rest)) {
        propString += ` ${key}={${JSON.stringify(value)}}`;
    }
    return `<${tag}${propString}>${render(children)}</${tag}>`;
}
exports.create = create;
function guard(value, cb) {
    if (value) {
        const children = cb(value);
        return render(children);
    }
    return "";
}
exports.guard = guard;
function render(children) {
    const res = Array.isArray(children)
        ? children.filter((c) => c !== undefined).join("\n")
        : children !== null && children !== void 0 ? children : "";
    const isMultiline = res.split("\n").length > 1;
    // It is not possible to wrap “blocks” if text and tags are on the same line,
    // but the corresponding tags are on different lines. This can accidentally
    // happen if the rendered item has multiple lines. To be safe, we pad with
    // newlines.
    //
    // See: https://mdxjs.com/migrating/v2/#jsx
    if (isMultiline) {
        return "\n" + res + "\n";
    }
    return res;
}
exports.render = render;
