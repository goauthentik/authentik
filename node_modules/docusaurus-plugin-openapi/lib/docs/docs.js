"use strict";
/* ============================================================================
 * Copyright (c) Cloud Annotations
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 * ========================================================================== */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCategoryIndexMatcherParam = exports.isCategoryIndex = exports.processDocMetadata = void 0;
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Taken and adapted from:
 * https://github.com/facebook/docusaurus/blob/main/packages/docusaurus-plugin-content-docs/src/docs.ts
 */
const path_1 = __importDefault(require("path"));
const utils_1 = require("@docusaurus/utils");
const frontMatter_1 = require("./frontMatter");
const slug_1 = __importDefault(require("./slug"));
/** Docs with draft front matter are only considered draft in production. */
function isDraftForEnvironment({ env, frontMatter, }) {
    var _a;
    return (_a = (env === "production" && frontMatter.draft)) !== null && _a !== void 0 ? _a : false;
}
async function doProcessDocMetadata({ docFile, relativeSource, context, options, env, }) {
    var _a, _b, _c, _d, _e, _f, _g;
    const { source, content, filePath } = docFile;
    const { siteDir } = context;
    const { frontMatter: parsedFrontMatter, contentTitle: parsedContentTitle, excerpt: parsedExcerpt, } = await (0, utils_1.parseMarkdownFile)({
        fileContent: content,
        filePath,
        parseFrontMatter: utils_1.DEFAULT_PARSE_FRONT_MATTER,
    });
    const frontMatter = (0, frontMatter_1.validateDocFrontMatter)(parsedFrontMatter);
    // E.g. api/plugins/myDoc -> myDoc; myDoc -> myDoc
    const sourceFileNameWithoutExtension = path_1.default.basename(source, path_1.default.extname(source));
    // E.g. api/plugins/myDoc -> api/plugins; myDoc -> .
    const sourceDirName = path_1.default.dirname(source);
    const { filename: unprefixedFileName, numberPrefix } = {
        filename: sourceFileNameWithoutExtension,
        numberPrefix: undefined,
    };
    const baseID = (_a = frontMatter.id) !== null && _a !== void 0 ? _a : unprefixedFileName;
    if (baseID.includes("/")) {
        throw new Error(`Document id "${baseID}" cannot include slash.`);
    }
    // For autogenerated sidebars, sidebar position can come from filename number
    // prefix or front matter
    const sidebarPosition = (_b = frontMatter.sidebar_position) !== null && _b !== void 0 ? _b : numberPrefix;
    // TODO legacy retrocompatibility
    // I think it's bad to affect the front matter id with the dirname?
    function computeDirNameIdPrefix() {
        if (sourceDirName === ".") {
            return undefined;
        }
        return sourceDirName;
    }
    const id = [computeDirNameIdPrefix(), baseID].filter(Boolean).join("/");
    const docSlug = (0, slug_1.default)({
        baseID,
        source,
        sourceDirName,
        frontMatterSlug: frontMatter.slug,
    });
    // Note: the title is used by default for page title, sidebar label,
    // pagination buttons... frontMatter.title should be used in priority over
    // contentTitle (because it can contain markdown/JSX syntax)
    const title = (_d = (_c = frontMatter.title) !== null && _c !== void 0 ? _c : parsedContentTitle) !== null && _d !== void 0 ? _d : baseID;
    const description = (_f = (_e = frontMatter.description) !== null && _e !== void 0 ? _e : parsedExcerpt) !== null && _f !== void 0 ? _f : "";
    const permalink = (0, utils_1.normalizeUrl)([
        context.baseUrl,
        options.routeBasePath,
        docSlug,
    ]);
    const draft = isDraftForEnvironment({ env, frontMatter });
    const unlisted = (_g = frontMatter.unlisted) !== null && _g !== void 0 ? _g : false;
    // Assign all of object properties during instantiation (if possible) for
    // NodeJS optimization.
    // Adding properties to object after instantiation will cause hidden
    // class transitions.
    return {
        id,
        title,
        description,
        source: (0, utils_1.aliasedSitePath)(filePath, siteDir),
        sourceDirName,
        slug: docSlug,
        permalink,
        draft,
        editUrl: null,
        tags: [],
        version: "",
        sidebarPosition,
        frontMatter,
        unlisted,
    };
}
function processDocMetadata(args) {
    try {
        return doProcessDocMetadata(args);
    }
    catch (err) {
        console.error `Can't process doc metadata for doc at path path=${args.docFile.filePath}`;
        throw err;
    }
}
exports.processDocMetadata = processDocMetadata;
// By convention, Docusaurus considers some docs are "indexes":
// - index.md
// - readme.md
// - <folder>/<folder>.md
//
// This function is the default implementation of this convention
//
// Those index docs produce a different behavior
// - Slugs do not end with a weird "/index" suffix
// - Auto-generated sidebar categories link to them as intro
const isCategoryIndex = ({ fileName, directories, }) => {
    var _a;
    const eligibleDocIndexNames = [
        "index",
        "readme",
        (_a = directories[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase(),
    ];
    return eligibleDocIndexNames.includes(fileName.toLowerCase());
};
exports.isCategoryIndex = isCategoryIndex;
/**
 * `guides/sidebar/autogenerated.md` ->
 *   `'autogenerated', '.md', ['sidebar', 'guides']`
 */
function toCategoryIndexMatcherParam({ source, sourceDirName, }) {
    // source + sourceDirName are always posix-style
    return {
        fileName: path_1.default.posix.parse(source).name,
        extension: path_1.default.posix.parse(source).ext,
        directories: sourceDirName.split(path_1.default.posix.sep).reverse(),
    };
}
exports.toCategoryIndexMatcherParam = toCategoryIndexMatcherParam;
